{"version":3,"sources":["axios.js","Row.js","Nav.js","requests.js","Banner.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","console","log","data","results","fetchMovies","className","map","movie","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","handleClick","src","poster_path","backdrop_path","alt","id","videoId","opts","height","width","playerVars","autoplay","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchRomanceMovies","fetchHorrorMovies","fetchDocumentries","Banner","str","n","setMovie","Math","floor","random","result","fetchData","style","backgroundSize","background","backgroundPosition","original_name","overview","length","substr","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d0b35389.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\n\r\n\r\nconst instance=axios.create({\r\n    baseURL:\"https://api.themoviedb.org/3\",\r\n});\r\n\r\n\r\nexport default instance;","import React,{useEffect, useState} from 'react'\r\nimport axios from './axios';\r\nimport './Row.css';\r\nimport YouTube from 'react-youtube';\r\nimport movieTrailer from 'movie-trailer';\r\n\r\n\r\nconst base_url=\"https://image.tmdb.org/t/p/original/\";\r\n\r\n\r\nfunction Row({title,fetchUrl,isLargeRow}) {\r\n    \r\n    const [movies,setMovies]=useState([]);\r\n    const [trailerUrl,setTrailerUrl]=useState(\"\");\r\n\r\n    useEffect(()=>{\r\n        \r\n    async function fetchMovies(){\r\n        let request= await axios.get(fetchUrl);\r\n        console.log(request.data.results)\r\n        setMovies(request.data.results);\r\n        return request;\r\n    }\r\n\r\n    fetchMovies();\r\n    },[fetchUrl])\r\n\r\n    const opts={\r\n        height:\"390\",\r\n        width:\"100%\",\r\n        playerVars:{\r\n\r\n            autoplay:1,\r\n        }\r\n    }\r\n\r\n    const handleClick=(movie)=>{\r\n        if(trailerUrl){\r\n            setTrailerUrl('');\r\n        }\r\n        else{\r\n            movieTrailer(movie?.name || \"\")\r\n            .then(url=>{\r\n                const urlParams=new URLSearchParams(new URL(url).search);\r\n                setTrailerUrl(urlParams.get(\"v\"));\r\n            })\r\n            .catch(error=>console.log(error))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <h2>{title}</h2>\r\n\r\n            <div className=\"row_posters\">\r\n                {movies.map(movie=>(\r\n                   <img className={`row_poster ${isLargeRow && \"row_posterLarge\"}`} \r\n                   key={movie.id} \r\n                   onClick={()=>handleClick(movie)}\r\n                   src={`${base_url}${isLargeRow?movie.poster_path:movie.backdrop_path}`} \r\n                   alt={movie.name}/>\r\n                ))}\r\n            </div>\r\n\r\n        { trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row\r\n","import React, { useEffect, useState } from 'react';\r\n\r\nimport './Nav.css';\r\n\r\nfunction Nav() {\r\n    const [show,handleShow]=useState(false);\r\n\r\n    useEffect(()=>{\r\n        window.addEventListener(\"scroll\",()=>{\r\n            if(window.scrollY>100){\r\n                handleShow(true);\r\n            }\r\n            else{\r\n                handleShow(false);\r\n            }\r\n        });\r\n        return ()=>{\r\n            window.removeEventListener(\"scroll\");\r\n        }\r\n    },[])\r\n    return (\r\n        <div className={`nav ${show && \"nav_black\"}`}>\r\n            <img className=\"nav_logo\"\r\n            src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/250px-Netflix_2015_logo.svg.png\"\r\n            alt=\"Netflix Logo\"/>\r\n            <img className=\"nav_avatar\"\r\n            src=\"https://mir-s3-cdn-cf.behance.net/project_modules/disp/366be133850498.56ba69ac36858.png\"\r\n            alt=\"Netflix Avatar\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav\r\n","\r\nconst API_KEY=\"4aa07675c7892f023ab9462fa8b31857\";\r\n\r\nconst requests={\r\n\r\n    fetchTrending:`/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n    fetchNetflixOriginals:`/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchTopRated:`/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n    fetchActionMovies:`/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies:`/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchRomanceMovies:`/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchHorrorMovies:`/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchDocumentries:`/discover/movie?api_key=${API_KEY}&with_genres=99`\r\n\r\n}\r\n\r\n\r\n\r\nexport default requests;\r\n\r\n\r\n\r\n\r\n\r\n","import React,{useState,useEffect} from 'react';\r\nimport axios from './axios';\r\nimport requests from './requests';\r\nimport './Banner.css';\r\n\r\nfunction Banner() {\r\n    const [movie,setMovie]= useState([]);\r\n\r\n    useEffect(()=>{\r\n        async function fetchData(){\r\n            let request= await axios.get(requests.fetchNetflixOriginals);\r\n            setMovie(request.data.results[Math.floor(Math.random()*request.data.result-1)]);\r\n        }\r\n        fetchData();\r\n    },[])\r\n\r\n    function truncate(str,n){\r\n        return str?.length>n ?str.substr(0,n-1) + \"...\" : str;\r\n    }\r\n\r\n    return (\r\n        <header className=\"banner\" style={{\r\n            backgroundSize:'cover',\r\n            background:`url(https://image.tmdb.org/t/p/original/${movie?.backdrop_path})`,\r\n            backgroundPosition:'center center',\r\n        }}>\r\n            <div className=\"banner_contents\">\r\n                <h1 className=\"banner_title\">{movie?.title || movie?.name || movie?.original_name}</h1>\r\n                <div className=\"banner_buttons\">\r\n                    <button className=\"banner_button\">Play</button>\r\n                    <button className=\"banner_button\">My List</button>\r\n                </div>\r\n                <h1 className=\"banner_description\">{truncate(movie?.overview,150)}</h1>    \r\n            </div>\r\n            <div className=\"banner_fadedown\"/>\r\n        </header>\r\n        \r\n    )\r\n}\r\n\r\nexport default Banner\r\n","// import axios from './axios';\nimport Row from './Row';\nimport Nav from './Nav';\nimport Banner from './Banner';\nimport requests from './requests';\n\n\n\nfunction App() {\n\n  \n  return (\n    <div className=\"app\">\n    <Nav/>\n    <Banner/>\n    <Row title={\"NETFLIX ORIGINALS\"} fetchUrl={requests.fetchNetflixOriginals} isLargeRow={true}/>\n    <Row title={\"Trending Now\"} fetchUrl={requests.fetchTrending}/>    \n    <Row title={\"Top Rated\"} fetchUrl={requests.fetchTopRated}/>    \n    <Row title={\"Action Movies\"} fetchUrl={requests.fetchActionMovies}/>    \n    <Row title={\"Comedy Movies\"} fetchUrl={requests.fetchComedyMovies}/>    \n    <Row title={\"Horror Movies\"} fetchUrl={requests.fetchHorrorMovies}/>    \n    <Row title={\"Romance Movies\"} fetchUrl={requests.fetchRomanceMovies}/>    \n    <Row title={\"Documentries\"} fetchUrl={requests.fetchDocumentries}/>    \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}